#lang gibbon

(data List
      [Cons Int List]
      [Nil])

(define (foo [p : List]) : Int
  (case p
    [(Cons i rst) i]
    [(Nil) 0]))

(let ([x : Int 10])
  (let ([y : Int 20])
    (let ([p : (Vector List List) (par (Cons x (Nil)) (Cons y (Nil)))])
      (foo (vector-ref p 0)))))
