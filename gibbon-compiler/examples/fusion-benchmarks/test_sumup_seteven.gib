#lang gibbon


(data Tree
      [Leaf Int]
      [Inner Int Bool Tree Tree])

(define (sum-up [tr : Tree]) : Tree
  (case tr
    [(Leaf n) (Leaf n)]
    [(Inner sum x left right)
     (let  ([l : Tree (sum-up left)]
            [r : Tree (sum-up right)])
       (Inner (+ (value l) (value r)) x l r))]))

(define (set-even [tr : Tree]) : Tree
  (case tr
    [(Leaf n) (Leaf n)]
    [(Inner sum x left right)
     (let  ([l : Tree (set-even left)]
            [r : Tree (set-even right)])
       (Inner sum (is-even sum) l r))]))

(define (is-even [n : Int]) : Bool
  (= (mod n 2) 0))

(define (value [tr : Tree]) : Int
  (case tr
    [(Leaf n)  n]
    [(Inner sum x left right) sum]))

(define (generateTree [n : Int]) : Tree
  (if (= n 0)
      (Leaf 2)
      (Inner 0 False (generateTree (- n 1 )) (generateTree (- n 1)))))

(define (flipTwice [tr : Tree]) : Tree
  (case tr
    [(Leaf n) (Leaf n)]
    [(Inner sum x left right)
     (Inner sum x (flipTwice (flipTwice right)) (flipTwice (flipTwice left)))]))

;; (let* ([tr : Tree (generateTree 2)]
;;        [tr3 : Tree (set-even (sum-up tr))])
;;   tr3)

(flipTwice (flipTwice (Inner 0 False (Leaf 2) (Leaf 2))))
