#lang gibbon

(data Foo (A Int) (B Int))

;; Foo_a -{}-> Foo_a
(define (id [x : Foo]) : Foo x)

(define (unwrap-foo [a : Foo]) : Int
  (case a
    [(A x) x]
    [(B y) y]))

(let ([a : Foo (id (A 1))])
  (unwrap-foo a))
