#lang gibbon

;; To be used when benchmarking Gibbon2

(data Tree
      [Leaf Int]
      [Node Tree Tree])

(define (buildtree [n : Int]) : Tree
  (if (= n 0)
      (Leaf 1)
      (Node (buildtree (- n 1))
            (buildtree (- n 1)))))

(define (rightmost [tr : Tree]) : Int
  (case tr
    [(Leaf n) n]
    [(Node x y) (rightmost y)]))

(let ([tr0 : Tree (buildtree (size-param))])
  (let ([n : Int (time (let ([x : Int (rightmost tr0)])
                               x))])
    n))
