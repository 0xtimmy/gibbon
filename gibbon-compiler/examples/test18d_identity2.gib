#lang gibbon

(data Foo (A Int) (B Int))

(define (id2 [ev : Foo]) : Foo
  (if True ev ev))

(define (unwrap-foo [a : Foo]) : Int
  (case a
    [(A x) x]
    [(B y) y]))

(let ([a : Foo (id2 (A 1))])
  (unwrap-foo a))
