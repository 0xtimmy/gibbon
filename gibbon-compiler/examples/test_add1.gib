#lang gibbon

(require "test_ddtree.gib")
(require "test_buildtree.gib")

(define (add1 [tr : Tree]) : Tree
  (case tr
    [(Leaf n) (Leaf (+ n 1))]
    [(Node x y) (Node (add1 x) (add1 y))]))

(define (sumtree [tr : Tree]) : Int
  (case tr
    [(Leaf n) n]
    [(Node x y)
     (let ([sumx : Int (sumtree x)])
       (let ([sumy : Int (sumtree y)])
         (+ sumx sumy)))]))

(let ([tr : Tree (add1 (buildtree 2))])
  (sumtree tr))
