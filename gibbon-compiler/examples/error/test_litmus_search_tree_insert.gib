#lang gibbon

(data Tree
      [Null]
      [Leaf Int]
      [Node Int Tree Tree])

;; (define (buildtree [n : Int]) : Tree
;;   (helper 0 (- n 1)))

(define (helper [s : Int] [e : Int]) : Tree
  (if (< e s)
      (Null)
      (if (= s e)
          (Leaf s)
          (let ([m : Int (+ (div (- e s) 2) s)])
            (Node m (helper s (- m 1))
                  (helper (+ m 1) e))))))

(define (copy-tree [tr : Tree]) : Tree
  (case tr
    [(Null) (Null)]
    [(Leaf n) (Leaf n)]
    [(Node n1 l r) (Node n1 (copy-tree l) (copy-tree r))]))

(define (sum-tree [tr : Tree]) : Int
  (case tr
    [(Null) 0]
    [(Leaf n) n]
    [(Node n l r) (+ n (+ (sum-tree l) (sum-tree r)))]))

(define (tree-insert [tr : Tree] [n : Int]) : Tree
  (case tr
    [(Null)        (Leaf n)]
    [(Leaf n1)     (if (< n n1)
                       (Node n1 (Leaf n) (Null))
                       (Node n1 (Null) (Leaf n)))]
    [(Node n1 l r) (if (> n1 n)
                       (Node n1 (copy-tree l) (tree-insert r n))
                       (Node n1 (tree-insert l n) (copy-tree r)))]))

(let ([m : Int 25])
  (let([tr0 : Tree (helper 1 2)])
    (let ([tr1 : Tree (time (tree-insert tr0 1))])
      (sum-tree tr1))))
