#lang gibbon

(data Foo (A Int) (B Int))

(define (foo [ev : Foo]) : Foo
  (case ev
    [(A x) (B x)]
    [(B y) ev]))

(define (unwrap-foo [a : Foo]) : Int
  (case a
    [(A x) x]
    [(B y) y]))

(let ([x : Foo (foo (A 1))])
  (unwrap-foo x))
