#lang gibbon

(data List
      [Nil]
      [Cons Sym List])

(define (elem-go [n : Int] [x : Sym] [xs : List]) : Int
  (case xs
    [(Nil) -1]
    [(Cons y ys) (if (eqsym y x)
                     n
                     (elem-go (+ n 1) x ys))]))

(define (elem [x : Sym] [xs : List]) : Int
  (elem-go 0 x xs))

(let ([a : Sym 'abc])
  (let ([as : List (Cons 'a (Cons 'b (Cons 'abc (Nil))))])
    (elem a as)))
