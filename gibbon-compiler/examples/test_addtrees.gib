#lang gibbon

(require "test_ddtree.gib")

(define (addtrees [tr1 : Tree] [tr2 : Tree]) : Int
  (case tr1
    [(Leaf n) (case tr2
                [(Leaf m) (+ n m)])]
    [(Node x y) (case tr2
                  [(Node j k)
                   (let ([x : Int (addtrees x j)])
                     (let ([y : Int (addtrees y k)])
                       (+ x y)))])]))


(addtrees (Node (Leaf 1) (Leaf 1)) (Node (Leaf 1) (Leaf 1)))
