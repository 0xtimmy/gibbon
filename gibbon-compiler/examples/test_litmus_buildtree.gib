#lang gibbon

(data Tree
      [Leaf Int]
      [Node Tree Tree])

(define (buildtree [n : Int]) : Tree
  (if (= n 0)
      (Leaf 100)
      (let ([min1  : Int (- n 1)])
        (let ([l : Tree (buildtree min1)]
              [r : Tree (buildtree min1)])
          (Node l r)))))

(define (sumtree [tr : Tree]) : Int
  (case tr
    [(Leaf n) n]
    [(Node x y)
     (let ([sumx : Int (sumtree x)])
       (let ([sumy : Int (sumtree y)])
         (+ sumx sumy)))]))

(let ((tr0 : Tree (iterate (buildtree (size-param)))))
  (sumtree tr0))
