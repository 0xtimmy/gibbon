#lang gibbon

(require "../../grammar_racket.gib")
(provide subst)

;; copied exactly


(define (subst [old : Sym] [new : Sym] [e0 : Toplvl]) : Toplvl
  (top old new e0))

;; Foldish functions
; ------------------------------------------------------------

(define (memq [v : Sym] [ls : ListSym]) : Bool
  (case ls
    [(CONSSYM s ls) (or (eq? v s) (memq v ls))]
    [(NULLSYM) False]))

(define (bound? [old : Sym] [ls : LVBIND]) : Bool
  (case ls
    [(CONSLVBIND syms e rest) (if (memq old syms)
                                  True
                                  (bound? old rest))]
    [(NULLLVBIND) False]))

;; Subst style functions
;; ------------------------------------------------------------

(define (top [old : Sym] [new : Sym] [e : Toplvl]) : Toplvl
  (case e
    [(DefineValues ls e)
     (DefineValues (sym-ls ls) (expr old new e))]
    [(DefineSyntaxes ls e)
     (DefineSyntaxes (sym-ls ls) (expr old new e))]
    [(BeginTop ls)
     (BeginTop (top-ls old new ls))]
    [(Expression e)
     (Expression (expr old new e))]))

(define (top-ls [old : Sym] [new : Sym] [es : ListToplvl]) : ListToplvl
  (case es
    [(CONSTOPLVL e es) (CONSTOPLVL (top old new e) (top-ls old new es))]
    [(NULLTOPLVL) (NULLTOPLVL)]))

(define (expr-ls [old : Sym] [new : Sym] [es : ListExpr]) : ListExpr
  (case es
    [(CONSEXPR e es) (CONSEXPR (expr old new e) (expr-ls old new es))]
    [(NULLEXPR) (NULLEXPR)]))

(define (subst-lvbind [old : Sym] [new : Sym] [lv : LVBIND]) : LVBIND
  (case lv
    [(NULLLVBIND) (NULLLVBIND)]
    [(CONSLVBIND syms e rest)
     (CONSLVBIND (sym-ls syms) (expr old new e) (subst-lvbind old new rest))]))

(define (subst-lambdacase [old : Sym] [new : Sym] [lc : LAMBDACASE]) : LAMBDACASE
       (case lc
         [(NULLLAMBDACASE) lc]
         [(CONSLAMBDACASE formals exprs rest)
          (if (bound-in? old formals)
              (CONSLAMBDACASE (walk-formals formals) (copy-exprs exprs)      (subst-lambdacase old new rest))
              (CONSLAMBDACASE (walk-formals formals) (expr-ls old new exprs) (subst-lambdacase old new rest)))]))

(define (expr [old : Sym] [new : Sym] [e0 : Expr]) : Expr
  (case e0
    ;; Variable references:
    [(VARREF s)
     (if (eq? old s)
         (VARREF new)
         (VARREF s))]
    [(Top s)
     (if (eq? old s)
         (Top new)
         (Top s))]
    [(VariableReference s)   ; #%variable-reference
     (if (eq? old s)
         (VariableReference new)
         (VariableReference s))]
    [(VariableReferenceTop s)   ; #%variable-reference (#%top . id)
     (if (eq? old s)
         (VariableReferenceTop new)
         (VariableReferenceTop s))]

    ;; Leaf forms:
    [(VariableReferenceNull)     ; (#%variable-reference)
     (VariableReferenceNull)]
    [(Quote d)            (Quote (walk-datum d))]
    [(QuoteSyntax d)      (QuoteSyntax (walk-datum d))]
    [(QuoteSyntaxLocal d) (QuoteSyntaxLocal (walk-datum d))] ;; (quote-syntax datum #:local)

    ;; Binding forms:
    [(Lambda formals lse)
     (Lambda (walk-formals formals)
             (if (bound-in? old formals)
                 (copy-exprs lse)
                 (expr-ls old new lse)))]
    [(CaseLambda cases)
     (CaseLambda (subst-lambdacase old new cases))]
    [(LetValues binds body)
     (if (bound? old binds)
         (LetValues (subst-lvbind old new binds) (copy-exprs body))
         (LetValues (subst-lvbind old new binds) (expr-ls old new body)))]
    [(LetrecValues binds body)
     (if (bound? old binds)
         (LetrecValues (copy-binds binds)           (copy-exprs body))
         (LetrecValues (subst-lvbind old new binds) (expr-ls old new body)))]
    [(If cond then else)
     (If (expr old new cond) (expr old new then) (expr old new else))]
    [(Begin exprs)
     (Begin (expr-ls old new exprs))]
    [(Begin0 e1 exprs)
     (Begin0 (expr old new e1) (expr-ls old new exprs))]
    [(App rator rands)  ;; (#%plain-app expr ...+)
     (App (expr old new rator) (expr-ls old new rands))]
    [(SetBang s e)
     (SetBang s (expr old new e))]
    [(WithContinuationMark e1 e2 e3)
     (WithContinuationMark (expr old new e1) (expr old new e2) (expr old new e3))]))

(define (bound-in? [sym : Sym] [formals : Formals]) : Bool
  (case formals
    [(F1 syms)
     (memq sym syms)]
    [(F2 syms s)
     (if (eq? sym s)
         True
         (memq sym syms))]
    [(F3 s)
     (eq? sym s)]))

;; Identity treewalks that could be replaced with sharing:
;;--------------------------------------------------------

(define (sym-ls [ls : ListSym]) : ListSym
  (case ls
    [(CONSSYM s ls) (CONSSYM s (sym-ls ls))]
    [(NULLSYM)      (NULLSYM)]))

(define (walk-formals [formals : Formals]) : Formals
  (case formals
    [(F1 syms)   (F1 (sym-ls syms))]
    [(F2 syms s) (F2 (sym-ls syms) s)]
    [(F3 s)      (F3 s)]))

(define (walk-datum [d : Datum]) : Datum
  (case d
    [(INTLIT i) (INTLIT i)]))

;; IMPLEMENT ME: this should be a copy/pasted tree-walk from treewalk_gibbon.rkt:
(define (copy-exprs [es : ListExpr]) : ListExpr
  (expr-ls (quote ignored) (quote ignored) es))

(define (copy-binds [lv : LVBIND]) : LVBIND
  (subst-lvbind (quote ignored) (quote ignored) lv))


