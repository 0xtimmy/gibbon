#lang gibbon

(require "../common.gib")
(provide flatten)

;; (Vector ExpC Stmts Syms Int)

(define (flatten [prg : R0]) : C0
  (case prg
    [(ProgramR e) (let ([fe-ret : (Vector ExpC Stmts Syms Int) (flatten-exp e 1234)])
                    (let ([flat : ExpC (vector-ref fe-ret 0)])
                      (let ([stmts : Stmts (vector-ref fe-ret 1)])
                        (let ([syms : Syms (vector-ref fe-ret 2)])
                          (let ([stmts2 : Stmts (snoc-stmts stmts (RetE flat))])
                            (ProgramC syms stmts2))))))]))

(define (flatten-exp [e : ExpR] [nxt : Int]) : (Vector ExpC Stmts Syms Int)
  (case e
    [(LitER n) (vector (LitEC n) (NullStmts) (NullSyms) nxt)]
    [(VarER v) (vector (VarEC v) (NullStmts) (NullSyms) nxt)]

    [(NegER e1) (let ([fe-e1 : (Vector ExpC Stmts Syms Int) (flatten-exp e1 nxt)])
                  (let ([flat-e1 : ExpC (vector-ref fe-e1 0)])
                    (let ([stmts-e1 : Stmts (vector-ref fe-e1 1)])
                      (let ([syms-e1 : Syms (vector-ref fe-e1 2)])
                        (let ([nxt-e1 : Int (vector-ref fe-e1 3)])
                          (let ([tmp : Sym (sym-append 'tmp nxt-e1)])
                            (vector (VarEC tmp)
                                    (snoc-stmts stmts-e1 (AssignE tmp (NegEC flat-e1)))
                                    (snoc-syms syms-e1 tmp)
                                    (+ nxt-e1 1))))))))]

    ([AddER e1 e2] (let ([fe-e1 : (Vector ExpC Stmts Syms Int) (flatten-exp e1 nxt)])
                     (let ([flat-e1 : ExpC (vector-ref fe-e1 0)])
                       (let ([stmts-e1 : Stmts (vector-ref fe-e1 1)])
                         (let ([syms-e1 : Syms (vector-ref fe-e1 2)])
                           (let ([nxt-e1 : Int (vector-ref fe-e1 3)])
                             (let ([nxt-e1^ : Int (+ 1 nxt-e1)])
                               (let ([fe-e2 : (Vector ExpC Stmts Syms Int)
                                            (flatten-exp e2 nxt-e1^)])
                                 (let ([flat-e2 : ExpC (vector-ref fe-e2 0)])
                                   (let ([stmts-e2 : Stmts (vector-ref fe-e2 1)])
                                     (let ([syms-e2 : Syms (vector-ref fe-e2 2)])
                                       (let ([nxt-e2 : Int (vector-ref fe-e2 3)])
                                         (let ([tmp : Sym (sym-append 'tmp nxt-e2)])
                                           (vector (VarEC tmp)

                                                   (snoc-stmts (append-stmts stmts-e1 stmts-e2)
                                                               (AssignE tmp (AddEC flat-e1 flat-e2)))

                                                   (snoc-syms (append-syms syms-e1 syms-e2) tmp)

                                                   (+ 1 nxt-e2)))))))))))))))

    ([LetER bnd bod] (let ([v : Sym (vector-ref bnd 0)])
                       (let ([rhs : ExpR (vector-ref bnd 1)])
                         (let ([fe-rhs : (Vector ExpC Stmts Syms Int) (flatten-exp rhs nxt)])
                           (let ([flat-rhs : ExpC (vector-ref fe-rhs 0)])
                             (let ([stmts-rhs : Stmts (vector-ref fe-rhs 1)])
                               (let ([syms-rhs : Syms (vector-ref fe-rhs 2)])
                                 (let ([nxt-rhs : Int (vector-ref fe-rhs 3)])
                                   (let ([fe-bod : (Vector ExpC Stmts Syms Int)
                                                 (flatten-exp bod nxt-rhs)])
                                     (let ([flat-bod : ExpC (vector-ref fe-bod 0)])
                                       (let ([stmts-bod : Stmts (vector-ref fe-bod 1)])
                                         (let ([syms-bod : Syms (vector-ref fe-bod 2)])
                                           (vector flat-bod

                                                   (append-stmts
                                                    stmts-rhs
                                                    (ConsStmt (AssignE v flat-rhs) stmts-bod))

                                                   (append-syms
                                                    syms-rhs
                                                    (ConsSym v syms-bod))

                                                   nxt-rhs)))))))))))))))
