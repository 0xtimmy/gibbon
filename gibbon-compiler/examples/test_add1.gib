#lang gibbon

;; (require "test_ddtree.gib")
(data Tree
      [Leaf Int]
      [Node Tree Tree])

(define (add1 [tr : Tree]) : Tree
  (case tr
    [(Leaf n) (Leaf (+ n 1))]
    [(Node x y) (Node (add1 x) (add1 y))]))

(let ([tr : Tree (add1 (Node (Node (Leaf 1) (Leaf 1)) (Node (Leaf 1) (Leaf 1))))])
  0)
