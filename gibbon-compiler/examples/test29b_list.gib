#lang gibbon

(data List
      [Nil]
      [Cons Int List])

(define (sum-list [xs : List]) : Int
  (case xs
    [(Nil) 0]
    [(Cons y ys) (+ y (sum-list ys))]))

(define (ins [x : Int] [xs : List]) : List
  (Cons x xs))

(sum-list (ins 1 (ins 2 (Nil))))
