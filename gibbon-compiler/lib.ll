; ModuleID = 'lib.c'
source_filename = "lib.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.dict_item = type { %struct.dict_item*, i32, %union.anon }
%union.anon = type { i8* }
%struct.timespec = type { i64, i64 }
%struct.rlimit = type { i64, i64 }

@.str = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [28 x i8] c"Error, key %lld not found!\0A\00", align 1
@global_benchfile_param = internal global i8* null, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [57 x i8] c"read_benchfile_param: benchmark input file was not set!\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [51 x i8] c"This binary was generated by the Gibbon compiler.\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"Usage: %s [OPTS] [size] [iters]\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"Options:\0A\00", align 1
@.str.7 = private unnamed_addr constant [65 x i8] c" --buffer-size <bytes>      Set the buffer size (default %lld).\0A\00", align 1
@global_default_buf_size = internal global i64 5000000000, align 8
@.str.8 = private unnamed_addr constant [84 x i8] c" --bench-input <path>       Set the input file read for benchmarking. Applies only\0A\00", align 1
@.str.9 = private unnamed_addr constant [78 x i8] c"                            IF the program was *compiled* with --bench-fun. \0A\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c" [gibbon rts] failed to getrlimit, code %d\0A\00", align 1
@.str.11 = private unnamed_addr constant [57 x i8] c" [gibbon rts] Failed to set stack size to %llu, code %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [79 x i8] c" [gibbon rts] Failed setrlimit stack size to something reasonable; giving up.\0A\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"--buffer-size\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"--bench-input\00", align 1
@.str.17 = private unnamed_addr constant [52 x i8] c"Not enough arguments after -file, expected <file>.\0A\00", align 1
@.str.18 = private unnamed_addr constant [28 x i8] c"Extra arguments left over: \00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@global_size_param = external global i64, align 8
@global_iters_param = internal global i64 1, align 8

; Function Attrs: nounwind uwtable
define i64 @__print_int(i64) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i64 %3)
  %5 = sext i32 %4 to i64
  ret i64 %5
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind uwtable
define i64 @__fputs(i8*) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %5 = call i32 @fputs(i8* %3, %struct._IO_FILE* %4)
  %6 = sext i32 %5 to i64
  ret i64 %6
}

declare i32 @fputs(i8*, %struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define void @INITALLOC() #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define void @save_alloc_state() #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define void @restore_alloc_state() #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.dict_item* @dict_alloc() #0 {
  %1 = call noalias i8* @malloc(i64 24) #5
  %2 = bitcast i8* %1 to %struct.dict_item*
  ret %struct.dict_item* %2
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define %struct.dict_item* @dict_insert_int(%struct.dict_item*, i64, i64) #0 {
  %4 = alloca %struct.dict_item*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.dict_item*, align 8
  store %struct.dict_item* %0, %struct.dict_item** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %8 = call %struct.dict_item* @dict_alloc()
  store %struct.dict_item* %8, %struct.dict_item** %7, align 8
  %9 = load i64, i64* %5, align 8
  %10 = trunc i64 %9 to i32
  %11 = load %struct.dict_item*, %struct.dict_item** %7, align 8
  %12 = getelementptr inbounds %struct.dict_item, %struct.dict_item* %11, i32 0, i32 1
  store i32 %10, i32* %12, align 8
  %13 = load i64, i64* %6, align 8
  %14 = trunc i64 %13 to i32
  %15 = load %struct.dict_item*, %struct.dict_item** %7, align 8
  %16 = getelementptr inbounds %struct.dict_item, %struct.dict_item* %15, i32 0, i32 2
  %17 = bitcast %union.anon* %16 to i32*
  store i32 %14, i32* %17, align 8
  %18 = load %struct.dict_item*, %struct.dict_item** %4, align 8
  %19 = load %struct.dict_item*, %struct.dict_item** %7, align 8
  %20 = getelementptr inbounds %struct.dict_item, %struct.dict_item* %19, i32 0, i32 0
  store %struct.dict_item* %18, %struct.dict_item** %20, align 8
  %21 = load %struct.dict_item*, %struct.dict_item** %7, align 8
  ret %struct.dict_item* %21
}

; Function Attrs: nounwind uwtable
define i64 @dict_lookup_int(%struct.dict_item*, i64) #0 {
  %3 = alloca %struct.dict_item*, align 8
  %4 = alloca i64, align 8
  store %struct.dict_item* %0, %struct.dict_item** %3, align 8
  store i64 %1, i64* %4, align 8
  br label %5

; <label>:5:                                      ; preds = %25, %2
  %6 = load %struct.dict_item*, %struct.dict_item** %3, align 8
  %7 = icmp ne %struct.dict_item* %6, null
  br i1 %7, label %8, label %26

; <label>:8:                                      ; preds = %5
  %9 = load %struct.dict_item*, %struct.dict_item** %3, align 8
  %10 = getelementptr inbounds %struct.dict_item, %struct.dict_item* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = sext i32 %11 to i64
  %13 = load i64, i64* %4, align 8
  %14 = icmp eq i64 %12, %13
  br i1 %14, label %15, label %21

; <label>:15:                                     ; preds = %8
  %16 = load %struct.dict_item*, %struct.dict_item** %3, align 8
  %17 = getelementptr inbounds %struct.dict_item, %struct.dict_item* %16, i32 0, i32 2
  %18 = bitcast %union.anon* %17 to i32*
  %19 = load i32, i32* %18, align 8
  %20 = sext i32 %19 to i64
  ret i64 %20

; <label>:21:                                     ; preds = %8
  %22 = load %struct.dict_item*, %struct.dict_item** %3, align 8
  %23 = getelementptr inbounds %struct.dict_item, %struct.dict_item* %22, i32 0, i32 0
  %24 = load %struct.dict_item*, %struct.dict_item** %23, align 8
  store %struct.dict_item* %24, %struct.dict_item** %3, align 8
  br label %25

; <label>:25:                                     ; preds = %21
  br label %5

; <label>:26:                                     ; preds = %5
  %27 = load i64, i64* %4, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0), i64 %27)
  call void @exit(i32 1) #6
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind uwtable
define i8* @read_benchfile_param() #0 {
  %1 = load i8*, i8** @global_benchfile_param, align 8
  %2 = icmp eq i8* %1, null
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %0
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.2, i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

; <label>:6:                                      ; preds = %0
  %7 = load i8*, i8** @global_benchfile_param, align 8
  ret i8* %7
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define void @show_usage(i8**) #0 {
  %2 = alloca i8**, align 8
  store i8** %0, i8*** %2, align 8
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i32 0, i32 0))
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %6 = load i8**, i8*** %2, align 8
  %7 = getelementptr inbounds i8*, i8** %6, i64 0
  %8 = load i8*, i8** %7, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i32 0, i32 0), i8* %8)
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  %12 = load i64, i64* @global_default_buf_size, align 8
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.7, i32 0, i32 0), i64 %12)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.8, i32 0, i32 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.9, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define double @avg(double*, i32) #0 {
  %3 = alloca double*, align 8
  %4 = alloca i32, align 4
  %5 = alloca double, align 8
  %6 = alloca i32, align 4
  store double* %0, double** %3, align 8
  store i32 %1, i32* %4, align 4
  store double 0.000000e+00, double* %5, align 8
  store i32 0, i32* %6, align 4
  br label %7

; <label>:7:                                      ; preds = %19, %2
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %4, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %22

; <label>:11:                                     ; preds = %7
  %12 = load i32, i32* %6, align 4
  %13 = sext i32 %12 to i64
  %14 = load double*, double** %3, align 8
  %15 = getelementptr inbounds double, double* %14, i64 %13
  %16 = load double, double* %15, align 8
  %17 = load double, double* %5, align 8
  %18 = fadd double %17, %16
  store double %18, double* %5, align 8
  br label %19

; <label>:19:                                     ; preds = %11
  %20 = load i32, i32* %6, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %6, align 4
  br label %7

; <label>:22:                                     ; preds = %7
  %23 = load double, double* %5, align 8
  %24 = load i32, i32* %4, align 4
  %25 = sitofp i32 %24 to double
  %26 = fdiv double %23, %25
  ret double %26
}

; Function Attrs: nounwind uwtable
define double @difftimespecs(%struct.timespec*, %struct.timespec*) #0 {
  %3 = alloca %struct.timespec*, align 8
  %4 = alloca %struct.timespec*, align 8
  store %struct.timespec* %0, %struct.timespec** %3, align 8
  store %struct.timespec* %1, %struct.timespec** %4, align 8
  %5 = load %struct.timespec*, %struct.timespec** %4, align 8
  %6 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load %struct.timespec*, %struct.timespec** %3, align 8
  %9 = getelementptr inbounds %struct.timespec, %struct.timespec* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = sub nsw i64 %7, %10
  %12 = sitofp i64 %11 to double
  %13 = load %struct.timespec*, %struct.timespec** %4, align 8
  %14 = getelementptr inbounds %struct.timespec, %struct.timespec* %13, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.timespec*, %struct.timespec** %3, align 8
  %17 = getelementptr inbounds %struct.timespec, %struct.timespec* %16, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = sub nsw i64 %15, %18
  %20 = sitofp i64 %19 to double
  %21 = fdiv double %20, 1.000000e+09
  %22 = fadd double %12, %21
  ret double %22
}

; Function Attrs: nounwind uwtable
define i32 @compare_doubles(i8*, i8*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to double*
  store double* %8, double** %5, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to double*
  store double* %10, double** %6, align 8
  %11 = load double*, double** %5, align 8
  %12 = load double, double* %11, align 8
  %13 = load double*, double** %6, align 8
  %14 = load double, double* %13, align 8
  %15 = fcmp ogt double %12, %14
  %16 = zext i1 %15 to i32
  %17 = load double*, double** %5, align 8
  %18 = load double, double* %17, align 8
  %19 = load double*, double** %6, align 8
  %20 = load double, double* %19, align 8
  %21 = fcmp olt double %18, %20
  %22 = zext i1 %21 to i32
  %23 = sub nsw i32 %16, %22
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.rlimit, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 @getrlimit(i32 3, %struct.rlimit* %6) #5
  store i32 %11, i32* %7, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %17

; <label>:13:                                     ; preds = %2
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %15 = load i32, i32* %7, align 4
  %16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i32 0, i32 0), i32 %15)
  call void @abort() #6
  unreachable

; <label>:17:                                     ; preds = %2
  %18 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  store i64 536870912, i64* %18, align 8
  %19 = call i32 @setrlimit(i32 3, %struct.rlimit* %6) #5
  store i32 %19, i32* %7, align 4
  br label %20

; <label>:20:                                     ; preds = %38, %17
  %21 = load i32, i32* %7, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %40

; <label>:23:                                     ; preds = %20
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %25 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = load i32, i32* %7, align 4
  %28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.11, i32 0, i32 0), i64 %26, i32 %27)
  %29 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = udiv i64 %30, 2
  store i64 %31, i64* %29, align 8
  %32 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, 102400
  br i1 %34, label %35, label %38

; <label>:35:                                     ; preds = %23
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.12, i32 0, i32 0))
  br label %40

; <label>:38:                                     ; preds = %23
  %39 = call i32 @setrlimit(i32 3, %struct.rlimit* %6) #5
  store i32 %39, i32* %8, align 4
  br label %20

; <label>:40:                                     ; preds = %35, %20
  store i32 0, i32* %9, align 4
  store i32 1, i32* %10, align 4
  br label %41

; <label>:41:                                     ; preds = %159, %40
  %42 = load i32, i32* %10, align 4
  %43 = load i32, i32* %4, align 4
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %45, label %162

; <label>:45:                                     ; preds = %41
  %46 = load i32, i32* %10, align 4
  %47 = sext i32 %46 to i64
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 %47
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @strcmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0)) #7
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %61, label %53

; <label>:53:                                     ; preds = %45
  %54 = load i32, i32* %10, align 4
  %55 = sext i32 %54 to i64
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 %55
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @strcmp(i8* %58, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0)) #7
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %63

; <label>:61:                                     ; preds = %53, %45
  %62 = load i8**, i8*** %5, align 8
  call void @show_usage(i8** %62)
  call void @exit(i32 0) #6
  unreachable

; <label>:63:                                     ; preds = %53
  %64 = load i32, i32* %10, align 4
  %65 = sext i32 %64 to i64
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 %65
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @strcmp(i8* %68, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0)) #7
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %86

; <label>:71:                                     ; preds = %63
  %72 = load i32, i32* %10, align 4
  %73 = load i32, i32* %4, align 4
  %74 = sub nsw i32 %73, 1
  %75 = icmp slt i32 %72, %74
  br i1 %75, label %76, label %86

; <label>:76:                                     ; preds = %71
  %77 = load i32, i32* %10, align 4
  %78 = add nsw i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = load i8**, i8*** %5, align 8
  %81 = getelementptr inbounds i8*, i8** %80, i64 %79
  %82 = load i8*, i8** %81, align 8
  %83 = call i64 @atoll(i8* %82) #7
  store i64 %83, i64* @global_default_buf_size, align 8
  %84 = load i32, i32* %10, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %10, align 4
  br label %157

; <label>:86:                                     ; preds = %71, %63
  %87 = load i32, i32* %10, align 4
  %88 = sext i32 %87 to i64
  %89 = load i8**, i8*** %5, align 8
  %90 = getelementptr inbounds i8*, i8** %89, i64 %88
  %91 = load i8*, i8** %90, align 8
  %92 = call i32 @strcmp(i8* %91, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i32 0, i32 0)) #7
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %112

; <label>:94:                                     ; preds = %86
  %95 = load i32, i32* %10, align 4
  %96 = add nsw i32 %95, 1
  %97 = load i32, i32* %4, align 4
  %98 = icmp sge i32 %96, %97
  br i1 %98, label %99, label %103

; <label>:99:                                     ; preds = %94
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.17, i32 0, i32 0))
  %102 = load i8**, i8*** %5, align 8
  call void @show_usage(i8** %102)
  call void @exit(i32 1) #6
  unreachable

; <label>:103:                                    ; preds = %94
  %104 = load i32, i32* %10, align 4
  %105 = add nsw i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = load i8**, i8*** %5, align 8
  %108 = getelementptr inbounds i8*, i8** %107, i64 %106
  %109 = load i8*, i8** %108, align 8
  store i8* %109, i8** @global_benchfile_param, align 8
  %110 = load i32, i32* %10, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %10, align 4
  br label %156

; <label>:112:                                    ; preds = %86
  %113 = load i32, i32* %9, align 4
  %114 = icmp sge i32 %113, 2
  br i1 %114, label %115, label %135

; <label>:115:                                    ; preds = %112
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %116, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.18, i32 0, i32 0))
  br label %118

; <label>:118:                                    ; preds = %130, %115
  %119 = load i32, i32* %10, align 4
  %120 = load i32, i32* %4, align 4
  %121 = icmp slt i32 %119, %120
  br i1 %121, label %122, label %133

; <label>:122:                                    ; preds = %118
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %124 = load i32, i32* %10, align 4
  %125 = sext i32 %124 to i64
  %126 = load i8**, i8*** %5, align 8
  %127 = getelementptr inbounds i8*, i8** %126, i64 %125
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %123, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0), i8* %128)
  br label %130

; <label>:130:                                    ; preds = %122
  %131 = load i32, i32* %10, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %10, align 4
  br label %118

; <label>:133:                                    ; preds = %118
  %134 = load i8**, i8*** %5, align 8
  call void @show_usage(i8** %134)
  call void @exit(i32 1) #6
  unreachable

; <label>:135:                                    ; preds = %112
  %136 = load i32, i32* %9, align 4
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %147

; <label>:138:                                    ; preds = %135
  %139 = load i32, i32* %10, align 4
  %140 = sext i32 %139 to i64
  %141 = load i8**, i8*** %5, align 8
  %142 = getelementptr inbounds i8*, i8** %141, i64 %140
  %143 = load i8*, i8** %142, align 8
  %144 = call i64 @atoll(i8* %143) #7
  store i64 %144, i64* @global_size_param, align 8
  %145 = load i32, i32* %9, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %9, align 4
  br label %154

; <label>:147:                                    ; preds = %135
  %148 = load i32, i32* %10, align 4
  %149 = sext i32 %148 to i64
  %150 = load i8**, i8*** %5, align 8
  %151 = getelementptr inbounds i8*, i8** %150, i64 %149
  %152 = load i8*, i8** %151, align 8
  %153 = call i64 @atoll(i8* %152) #7
  store i64 %153, i64* @global_iters_param, align 8
  br label %154

; <label>:154:                                    ; preds = %147, %138
  br label %155

; <label>:155:                                    ; preds = %154
  br label %156

; <label>:156:                                    ; preds = %155, %103
  br label %157

; <label>:157:                                    ; preds = %156, %76
  br label %158

; <label>:158:                                    ; preds = %157
  br label %159

; <label>:159:                                    ; preds = %158
  %160 = load i32, i32* %10, align 4
  %161 = add nsw i32 %160, 1
  store i32 %161, i32* %10, align 4
  br label %41

; <label>:162:                                    ; preds = %41
  call void @INITALLOC()
  call void (...) @__main_expr()
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @getrlimit(i32, %struct.rlimit*) #2

; Function Attrs: noreturn nounwind
declare void @abort() #3

; Function Attrs: nounwind
declare i32 @setrlimit(i32, %struct.rlimit*) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

; Function Attrs: nounwind readonly
declare i64 @atoll(i8*) #4

declare void @__main_expr(...) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }
attributes #7 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.9.1 (tags/RELEASE_391/final)"}
