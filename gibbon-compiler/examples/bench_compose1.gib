#lang gibbon

;; This benchmark  measures tree insert composed with add1.
;; Repeated inserts would fragment the serialized tree (due to tagged indirections),
;; and mapping over this tree should be a bit slower.

;; But after we map over this once, the data should be in a single buffer again.
;; This "fixes" the fragmentation. And a subsequent traversal should be faster
;; than before. bench_compose2 measures that.

(data Tree
      [Null]
      [Leaf Int]
      [Node Int Tree Tree])

;; buildtree:
;; (helper 0 1) => (Node 1 (Leaf 0) (Node 2 (Null) (Leaf 3)))
(define (helper [s : Int] [e : Int]) : Tree
  (if (< e s)
      (Null)
      (if (= s e)
          (Leaf s)
          (let ([m : Int (+ (div (- e s) 2) s)])
            (Node m (helper s (- m 1))
                  (helper (+ m 1) e))))))

(define (tree-insert [tr : Tree] [n : Int]) : Tree
  (case tr
    [(Null)        (Leaf n)]
    [(Leaf n1)     (if (< n n1)
                       (Node n1 (Leaf n) (Null))
                       (Node n1 (Null) (Leaf n)))]
    [(Node n1 l r) (if (< n n1)
                       (Node n1 (tree-insert l n) r)
                       (Node n1 l (tree-insert r n)))]))

(define (add1 [tr : Tree]) : Tree
  (case tr
    [(Null)              (Null)]
    [(Leaf n)            (Leaf (+ n 1))]
    [(Node m left right) (Node (+ m 1) (add1 left) (add1 right))]))

;; (define (rightmost [acc : Int] [tr : Tree]) : Int
;;   (case tr
;;     [(Null)              acc]
;;     [(Leaf n)            n]
;;     [(Node m left right) (rightmost acc right)]))

(define (sum [tr : Tree]) : Int
  (case tr
    [(Null)              0]
    [(Leaf n)            n]
    [(Node m left right) (+ m (+ (sum left) (sum right)))]))

(let ([m : Int (size-param)])
  (let ([total-nodes : Int (- (exp 2 (+ (size-param) 1)) 1)])
    (let ([tr0 : Tree (helper 0 total-nodes)])
      (let ([tr1 : Tree (iterate (let ([j : Int (mod (rand) total-nodes)])
                                   (tree-insert tr0 j)))])
        (let ([tr2 : Tree (time (add1 tr1))])
          (sum tr2))))))
