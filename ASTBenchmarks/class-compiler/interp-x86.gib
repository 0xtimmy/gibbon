#lang gibbon

(require "common.gib")

(provide interp-x86)

;; CC regs stack
(data CCT
      [CC (SymDict Int) (SymDict Int)])

(define (defaultCC) : CCT
  (CC (empty-dict) (empty-dict)))

(define (interp-x86 [prg : X86]) : Int
  (case prg
    [(ProgramX86 vars stk-size instrs)
     (let ([cc : CC (mapm-go-cc (defaultCC) instrs)])
       (case cc
         [(CC regs stack)
          (lookup regs 'RAX)]))]))

(define (mapm-go-cc [cc : CCT] [instrs : Instrs]) : CCT
  (case instrs
    [(NullInstrs) cc]
    [(ConsInstr i rst) (let ([cc^ : CC (go-ix86 cc i)])
                         (mapm-go-cc cc^ rst))]))

(define (go-ix86 [cc : CCT] [instr : Instr]) : CCT
  (case instr
    [(ADDQ src dst) (let ([vsrc : Int (readCC cc src)])
                      (let ([vdst : Int (readCC cc dst)])
                        (let ([sum : Int (+ vsrc vdst)])
                          (let ([cc^ : CC (putCC cc sum dst)])
                            cc^))))]
    [(MOVQ src dst) (let ([vsrc : Int (readCC cc src)])
                      (let ([cc^ : CC (putCC cc vsrc dst)])
                        cc^))]
    [(NEGQ e) (let ([v : Int (readCC cc e)])
                (let ([v^ : Int (- 0 v)])
                  (let ([cc^ : CC (putCC cc v^ e)])
                    cc^)))]))

(define (putCC [cc : CCT] [i : Int] [e : ExpX86]) : CCT
  (case e
    [(RegE r) (case cc
                [(CC regs stack) (let ([regs^ : (SymDict Int) (insert regs r i)])
                                   (CC regs^ stack))])]
    [(DerefE r o) (case cc
                    [(CC regs stack) (let ([stack^ : (SymDict Int) (insert stack (sym-append r o) i)])
                                       (CC regs stack^))])]))

(define (readCC [cc : CCT] [e : ExpX86]) : Int
  (case e
    [(VarEX86 v) (error "readCC: unexpected VarEX86")]
    [(LitEX86 n) n]
    [(RegE r) (case cc
                [(CC regs stack) (lookup regs r)])]
    [(DerefE r o) (case cc
                    ;; check if r is RBP here
                    [(CC regs stack) (lookup stack (sym-append r o))])]))
