#lang gibbon

(data Foo (A Int) (B Int))

(define (id [x : Int] [y : Foo]) : Foo
  y)

(define (unwrap-foo [a : Foo]) : Int
  (case a
    [(A x) x]
    [(B y) y]))

(let ([a : Foo (id 10 (A 20))])
  (unwrap-foo a))
