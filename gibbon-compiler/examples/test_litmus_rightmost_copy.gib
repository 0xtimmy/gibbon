#lang gibbon

;; To be used when benchmarking Gibbon1

(data Tree
      [Leaf Int]
      [Node Tree Tree])

(define (buildtree [n : Int]) : Tree
  (if (= n 0)
      (Leaf 1)
      (Node (buildtree (- n 1))
            (buildtree (- n 1)))))

(define (copy [tr : Tree]) : Tree
  (case tr
    [(Leaf n) (Leaf n)]
    [(Node x y) (Node (copy x) (copy y))]))

(define (rightmost [tr : Tree]) : Int
  (case tr
    [(Leaf n) n]
    [(Node x y) (let ([x1 : Tree (copy x)])
                  (rightmost y))]))

(let ((tr0 : Tree (buildtree (size-param))))
  (let ((n : Int (time (rightmost tr0))))
    n))
